<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.loveverse</groupId>
    <artifactId>polymerization-backend</artifactId>
    <version>${revision}</version>
    <name>${project.artifactId}</name>
    <description>多应用聚合项目</description>
    <packaging>pom</packaging>

    <modules>
        <module>fast-common</module>
        <module>fast-gateway</module>
        <module>file-upload-service</module>
        <module>java-study</module>
        <module>auth-service</module>
        <module>services/wallpaper-web-service</module>
    </modules>

    <properties>
        <!-- 打包的项目名称 -->
        <jar-name>${project.artifactId}-${project.version}</jar-name>
        <!-- 统一项目版本 -->
        <revision>1.0.0</revision>

        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- spring 系列 -->
        <spring-boot.version>2.7.18</spring-boot.version>
        <spring-cloud.version>2021.0.5</spring-cloud.version>
        <!-- 2021.0.1.0及之后的版本移除了对 Ribbon 默认依赖 -->
        <spring-cloud-alibaba.version>2021.0.5.0</spring-cloud-alibaba.version>
        <lombok.version>1.18.36</lombok.version>

        <!-- 打包部署插件相关 -->
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
        <flatten-maven-plugin.version>1.6.0</flatten-maven-plugin.version>
    </properties>
    <!-- 所有模块都会导入的依赖 -->
    <dependencies>
        <!-- lombok 管理 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>
        <!--单元测试-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>
    </dependencies>

    <!--统一管理依赖，并没有在项目中导入，子项目使用parent时，可以不用写版本，自动会使用这里的版本-->
    <dependencyManagement>
        <dependencies>
            <!-- fast-common 公共管理依赖 -->
            <dependency>
                <groupId>com.loveverse.dependencies</groupId>
                <artifactId>fast-common-dependencies</artifactId>
                <version>${revision}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- spring 依赖管理 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- spring cloud 依赖管理 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
            <!-- spring cloud alibaba 依赖管理 -->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <build>
        <!-- 项目名称:版本 -->
        <finalName>${jar-name}</finalName>
        <resources>
            <!-- java代码过滤 -->
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                    <include>**/*.properties</include>
                </includes>
                <excludes>
                    <exclude>**/*controller.html</exclude>
                </excludes>
            </resource>
            <!-- 启用资源过滤 -->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <pluginManagement>
            <plugins>
                <plugin>
                    <!-- 改变 maven 默认构建行为插件 -->
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot.version}</version>
                    <configuration>
                        <finalName>${jar-name}</finalName>
<!--                        <layers>-->
<!--                            <enabled>true</enabled>-->
<!--                        </layers>-->
                    </configuration>
                    <!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 -->
                    <executions>
                        <execution>
                            <id>repackage</id>
                            <goals>
                                <goal>repackage</goal>
                            </goals>

                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
        <!-- 模块构建需要用到的插件，回传到子模块 -->
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <version>${flatten-maven-plugin.version}</version>
                <configuration>
                    <flattenMode>resolveCiFriendliesOnly</flattenMode>
                    <updatePomFile>true</updatePomFile>
                </configuration>
                <executions>
                    <execution>
                        <id>flatten</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>flatten.clean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- maven-compiler-plugin 是 maven 自带的插件 -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <!-- 动态获取 maven settings.xml 中的配置 -->
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <!--项目依赖库的仓库地址-->
    <repositories>
        <repository>
            <id>aliyun</id>
            <url>https://maven.aliyun.com/repository/public</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <!--不允许从仓库下载快照版本-->
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
    <!--项目插件库的仓库地址-->
    <pluginRepositories>
        <pluginRepository>
            <id>aliyun-plugin</id>
            <url>https://maven.aliyun.com/repository/public</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

    <!--    <profiles>-->
    <!--        &lt;!&ndash; dev开发环境配置,prod为生产环境配置,没有测试人员暂不配置test &ndash;&gt;-->
    <!--        <profile>-->
    <!--            <id>dev</id>-->
    <!--            <properties>-->
    <!--                <profileActive>dev</profileActive>-->
    <!--            </properties>-->
    <!--            <activation>-->
    <!--                <activeByDefault>true</activeByDefault>-->
    <!--            </activation>-->
    <!--        </profile>-->
    <!--        <profile>-->
    <!--            <id>prod</id>-->
    <!--            <properties>-->
    <!--                <profileActive>prod</profileActive>-->
    <!--            </properties>-->
    <!--        </profile>-->
    <!--    </profiles>-->
</project>
