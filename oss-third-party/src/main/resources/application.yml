spring:
  application:
    name: oss-third-party
  datasource:
    druid:
      # createDatabaseIfNotExist=true 不存在则创建，目前只有 mysql 支持
      url: jdbc:mysql://${DATABASE_IP:192.168.37.10}:${DATABASE_PORT:3306}/${DATABASE_NAME:oss_file_dev}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&verifyServerCertificate=false&useSSL=false&allowMultiQueries=true&createDatabaseIfNotExist=true
      db-type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.cj.jdbc.Driver
      username: ${spring.datasource.username:root}
      password: ${spring.redis.password:123456}
      # 初始连接数
      initial-size: 5
      # 最小连接数
      min-idle: 15
      # 最大连接数
      max-active: 30
      # 超时时间(以秒数为单位)
      remove-abandoned-timeout: 180
      # 获取连接超时时间
      max-wait: 3000
      # 连接有效性检测时间
      time-between-eviction-runs-millis: 60000
      # 连接在池中最小生存的时间
      min-evictable-idle-time-millis: 300000
      # 连接在池中最大生存的时间
      max-evictable-idle-time-millis: 900000
      # 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除
      test-while-idle: true
      # 指明是否在从池中取出连接前进行检验,如果检验失败, 则从池中去除连接并尝试取出另一个
      test-on-borrow: true
      # 是否在归还到池中前进行检验
      test-on-return: false
      # 检测连接是否有效
      validation-query: select 1
      # 配置监控统计
      webStatFilter:
        enabled: true
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        reset-enable: false
        allow: localhost
      #        login-username: zrt
      #        login-password: qwe123#@!
      filter:
        stat:
          enabled: true
          # 记录慢SQL
          log-slow-sql: true
          slow-sql-millis: 1000
        #          merge-sql: true
        wall:
          config:
            multi-statement-allow: true
#    username: ${DATABASE_USERNAME:root}
#    password: ${DATABASE_PASSWORD:123456}
#    url: jdbc:mysql://${DATABASE_IP:192.168.37.10}:${DATABASE_PORT:3306}/${DATABASE_NAME:oss_file}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&verifyServerCertificate=false&useSSL=false&allowMultiQueries=true&createDatabaseIfNotExist=true
  profiles:
    # dev 配置会打印错误信息到前端
    active: @profileActive@
  redis:
    host: ${spring.redis.host:192.168.37.10}
    port: ${spring.redis.port:6379}
    database: ${spring.redis.database:10}
    password: ${spring.redis.password:123456}
  cloud:
    nacos:
      discovery:
        server-addr: ${spring.cloud.nacos.discovery.server-addr:192.168.37.10:8848}
server:
  port: 30100
  servlet:
    # 设置应用的上下文路径， 所有请求会以/oss-third-party开头
    context-path: /oss-third-party-api
# 后续更换存储桶只需要根据不同oss填写
minio:
  bucket: ${minio.bucket:oss_file}
  endpoint: ${minio.endpoint:http://192.168.37.10:9000}  #部署在docker上时，需填写对象存储上传的地址，9090是客户端地址
  access-key: ${minio.access-key:44h4ub0vvTDxF7cAuGBD}
  secret-key: ${minio.secret-key:leG2OwjuC7PgBvFMJHuAnexl3J7e5sAcXIjqfENq}

